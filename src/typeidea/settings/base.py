"""
Django settings for typeidea project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent.parent

DATA_DIR = BASE_DIR.joinpath("data")
if not DATA_DIR.exists():
    os.makedirs(DATA_DIR, exist_ok=True)
LOG_DIR = DATA_DIR.joinpath("logs")
if not LOG_DIR.exists():
    os.makedirs(LOG_DIR, exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    "django-insecure-@+6-kajldn&(wr0tls4ifc!6)jy=+h1lsj9=9wv@1srz_+x5*e",
)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "false") == "true"

# static file in gunicorn
WITH_STATIC = os.getenv("WITH_STATIC", "false") == "true"

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(" ")
X_FRAME_OPTIONS = 'SAMEORIGIN'
XS_SHARING_ALLOWED_METHODS = ['POST','GET','OPTIONS', 'PUT', 'DELETE']

DJANGO_SUPERUSER_USERNAME = os.getenv("DJANGO_SUPERUSER_USERNAME", "admin")
DJANGO_SUPERUSER_PASSWORD = os.getenv("DJANGO_SUPERUSER_PASSWORD", "adminadmin")
DJANGO_SUPERUSER_EMAIL = os.getenv(
    "DJANGO_SUPERUSER_EMAIL", "admin@example.com"
)
# Application definition

INSTALLED_APPS = [
    "typeidea",
    "blog",
    "config",
    "comment",
    "rest_framework",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "typeidea.urls"

THEME = "bootstrap"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "themes", THEME, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "typeidea.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

default_db_type = os.getenv("DEFAULT_DB_TYPE", "")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(DATA_DIR, "db.sqlite3"),
    }
}

if default_db_type == "postgresql":
    postgresql_name = os.getenv('POSTGRESQL_NAME', "")
    postgresql_user = os.getenv('POSTGRESQL_USER', "")
    postgresql_password = os.getenv('POSTGRESQL_PASSWORD', "")
    postgresql_host = os.getenv('POSTGRESQL_HOST', "")
    postgresql_port = int(os.getenv('POSTGRESQL_PORT', "3306"))

    DATABASES["default"] = {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": postgresql_name,
        'USER': postgresql_user,
        'PASSWORD': postgresql_password,
        'HOST': postgresql_host,
        'PORT': postgresql_port,
        'OPTIONS': {  }
    }
elif default_db_type == "mysql":
    mysql_name = os.getenv('MYSQL_NAME', "")
    mysql_user = os.getenv('MYSQL_USER', "")
    mysql_password = os.getenv('MYSQL_PASSWORD', "")
    mysql_host = os.getenv('MYSQL_HOST', "")
    mysql_port = int(os.getenv('MYSQL_PORT', "3306"))

    DATABASES["default"] = {
        "ENGINE": "django.db.backends.mysql",
        "NAME": mysql_name,
        'USER': mysql_user,
        'PASSWORD': mysql_password,
        'HOST': mysql_host,
        'PORT': mysql_port,
        'OPTIONS': {  }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.MinimumLengthValidator"
        )
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.CommonPasswordValidator"
        )
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.NumericPasswordValidator"
        )
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR.joinpath("build").joinpath("static")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "themes", THEME, "static")]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": (
        "rest_framework.pagination.LimitOffsetPagination"
    ),
    "PAGE_SIZE": 10,
}

MAXBYTES = 1 * 1024 * 1024 * 1024
BACKUPCOUNT = 3
maxbytes = int(os.getenv("ROTATING_MAXBYTES", MAXBYTES))
backupcount = int(os.getenv("ROTATING_BACKUPCOUNT", BACKUPCOUNT))

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s %(process)d %(threadName)-10s "
            "%(filename)s:%(lineno)s %(funcName)5s() "
            "%(levelname)-3s %(message)s",
        },
        "simple": {
            "format": "{asctime} {process} {threadName} {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "DEBUG",
            "formatter": "simple",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOG_DIR.joinpath("app.log"),
            "maxBytes": maxbytes,
            "backupCount": backupcount,
        },
    },
    "loggers": {
        "cmd": {"handlers": ["console", "file"], "level": "DEBUG"},
        "api": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
        },
    },
}
